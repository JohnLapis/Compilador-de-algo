#+property: header-args :tangle ScannerTest.java :comments link

* imports
searc Oracle ~resource~ (from resource.getInputStream())
             ~new InputSource()~
#+begin_src java :noweb-ref imports
package compilador;

import java.util.List;
import java.util.Arrays;
import java.util.Collection;
import java.util.ArrayList;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

import java.io.IOException;
import org.xml.sax.SAXException;
import javax.xml.parsers.ParserConfigurationException;

import junitparams.*;
import org.junit.Test;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

import static junitparams.JUnitParamsRunner.*;
import static org.junit.Assert.assertEquals;
#+end_src

* Mapper
#+begin_src java :noweb-ref Mapper :tangle XMLMapper.java
package compilador;

import junitparams.mappers.DataMapper;
import java.io.Reader;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.xml.sax.InputSource;
import java.io.InputStream;
import java.io.ByteArrayInputStream;

import java.io.StringReader;
import java.io.IOException;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;


public class XMLMapper implements DataMapper {
    public Object[] map(Reader reader) {
        try {
            // Arbittray size. Should change in the future.
            char charArray[] = new char[5000];
            reader.read(charArray);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(charArray);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = dbFactory.newDocumentBuilder();
            // InputStream uri = new InputStream(stringBuilder.toString());
            // InputStream uri = new InputStream(reader);

            ByteArrayInputStream uri = new ByteArrayInputStream(stringBuilder.toString().getBytes("UTF-8"));
            Document doc = docBuilder.parse(uri);
            NodeList nodes = doc.getElementsByTagName("code");
            String elements[] = new String[nodes.getLength()];
            for (int i = 0; i < nodes.getLength(); i++) {
                elements[i] = nodes.item(i).getTextContent();
            }
            return elements;
        } catch (IOException e) {
            System.out.println("Error " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException();
        } catch (SAXException e) {
            System.out.println("Error " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException();
        } catch (ParserConfigurationException e) {
            System.out.println("Error " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException();
        }
    }
}
#+end_src
* ScannerTest

#+begin_src java :noweb-ref ScannerTest
@RunWith(JUnitParamsRunner.class)
public class ScannerTest {
    private static String fixtureDirectory = "src/test/java/compilador/fixtures";

    @Test
    @Parameters(method = "data")
    public void testTokenzine(String input, String expected) {
        System.out.println(input);
        System.out.println(expected);

        try {
            System.out.println("foi");

            assertEquals(String.join(" ", Scanner.tokenize(input)), expected);
        } catch (Throwable e) {
            System.out.println("Error " + e.getMessage());
            e.printStackTrace();
        }
    }
    private Collection<Object[]> data() throws IOException, ParserConfigurationException, SAXException {
        List parameters = new ArrayList();
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = dbFactory.newDocumentBuilder();
        File path = new File(ScannerTest.fixtureDirectory);
        for (String file : path.list()) {
            file = path + "/" + file;
            Document doc = docBuilder.parse(file);
            NodeList nodes = doc.getElementsByTagName("codeSample");
            int nodeLength = nodes.getLength();
            for (int i = 0; i < nodeLength; i++) {
                Element currentNode = (Element) nodes.item(i);
                String input = currentNode.getElementsByTagName("code").item(0)
                    .getTextContent();
                String expected = currentNode.getElementsByTagName("tokens").item(0)
                    .getTextContent();
                parameters.add(Arrays.asList(input, expected));
                System.out.println(parameters.get(i).toString());
            }
        }
        return Arrays.asList(parameters);
        // return parameters;
    }
}
#+end_src

#+begin_src java :tangle no :noweb-ref dataInjectorMethod
    // public static Collection<Object[]> arithmeticValues() {
    //     return Arrays.asList(new Object[][] {
    //             { "44 + 845 * (885 - 33 / 5) ** 9", Arrays.asList("44", "+", "845", "*", "(", "885", "-", "33", "/", "5", ")", "**", "9") },
    //             { "44 + a * (b) ** 9", Arrays.asList("44", "+", "a", "*", "(", "b", ")", "**", "9") }
    //         });
    // }
#+end_src
